print(paste(i, ' / ', length(rsq), sep = ''))
rsq[i] <- pred_vs_obs(data_list)$rsq
}
# plot predicted vs observed function
myplot <- pred_vs_obs(data_list)$plot
print(myplot)
if (save_plots) {
ggsave(myplot,
filename = '../plots/sugars_consumption_pred_obs.pdf',
device = 'pdf',
dpi = 600,
width = 100,
height = 80,
units = 'mm',
limitsize = F)
}
# plot histogram of R^2
ggplot(data.frame(run = seq(1, length(rsq)),
rsq = rsq),
aes(x = rsq)) +
geom_histogram(binwidth = 0.05) +
scale_x_continuous(name = expression(italic(R)^2),
limits = c(0, 1),
breaks = c(0, 0.5, 1),
labels = c('0', '0.5', '1')) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.title = element_blank(),
legend.text = element_text(size = 16),
aspect.ratio = 0.6) +
annotate("segment", x=-Inf, xend=Inf, y=-Inf, yend=-Inf, size=0.5) +
annotate("segment", x=-Inf, xend=-Inf, y=-Inf, yend=Inf,size=0.5)
if (save_plots) {
ggsave(filename = '../plots/sugars_consumption_pred_obs_rsquared.pdf',
device = 'pdf',
dpi = 600,
width = 50,
height = 40,
units = 'mm',
limitsize = F)
}
# same thing but leave-one-out instead of a subset
pred_vs_obs_LOO <- function(leave_out = 'Ap,Hop,Ku,Lt,Td') {
# leave x % of data out of sample and predict
data_oos <- data_list[data_list$community == leave_out, ]
data_list <- data_list[!(data_list$community %in% data_oos$community), ]
data_list <- rbind(data_list, data.frame(community = '', fun = 0))
predF <- predictF_base(data_oos$community, data_list)
predF$fun[predF$fun < 0] <- 0
pred_obs <- merge(predF, data_oos, by = 'community', suffixes = c('_pred', '_obs'))
return(pred_obs)
}
loo <- lapply(data_list$community[data_list$community != ''],
FUN = pred_vs_obs_LOO)
loo <- do.call(rbind, loo)
loo$n_species <- nSpecies(loo$community)
loo$sq_err <- (loo$fun_pred - loo$fun_obs)^2
View(loo)
plot_this <- loo[grepl('Sc', loo$community), ]
View(plot_this)
ggplot(plot_this, aes(x = n_species - 1, y = sq_err, group = n_species)) +
geom_jitter(width = 0.15,
alpha = 0.25,
shape = 16) +
geom_boxplot(outlier.shape = NA,
fill = NA) +
scale_x_continuous(name = '# of species',
breaks = 1:7) +
scale_y_continuous(name = expression((italic(F)[pred] - italic(F)[obs])^2)) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.title = element_blank(),
legend.text = element_text(size = 16),
aspect.ratio = 1.4)
View(plot_this)
plot_this <- loo[grepl('Sc', loo$community) & loo$n_species > 1, ]
ggplot(plot_this, aes(x = n_species - 1, y = sq_err, group = n_species)) +
geom_jitter(width = 0.15,
alpha = 0.25,
shape = 16) +
geom_boxplot(outlier.shape = NA,
fill = NA) +
scale_x_continuous(name = '# of species',
breaks = 1:7) +
scale_y_continuous(name = expression((italic(F)[pred] - italic(F)[obs])^2)) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.title = element_blank(),
legend.text = element_text(size = 16),
aspect.ratio = 1.4)
ggplot(plot_this, aes(x = n_species - 1, y = sq_err, group = n_species)) +
geom_jitter(width = 0.15,
alpha = 0.25,
shape = 16) +
geom_boxplot(outlier.shape = NA,
fill = NA) +
scale_x_continuous(name = '# of species',
breaks = 1:7) +
scale_y_continuous(name = expression((italic(F)[pred] - italic(F)[obs])^2),
limits = c(0, 0.1)) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.title = element_blank(),
legend.text = element_text(size = 16),
aspect.ratio = 1.4)
ggplot(plot_this, aes(x = n_species - 1, y = sq_err, group = n_species)) +
geom_jitter(width = 0.15,
alpha = 0.25,
shape = 16) +
geom_boxplot(outlier.shape = NA,
fill = NA) +
scale_x_continuous(name = '# of species',
breaks = 1:7) +
scale_y_continuous(name = expression((italic(F)[pred] - italic(F)[obs])^2),
limits = c(0, 0.06)) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.title = element_blank(),
legend.text = element_text(size = 16),
aspect.ratio = 1.4)
plot_this$n_species <- factor(plot_this$n_species,
lavels = as.character(c(1, 3:6)))
plot_this$n_species <- factor(plot_this$n_species,
levels = as.character(c(1, 3:6)))
ggplot(plot_this, aes(x = n_species - 1, y = sq_err, group = n_species)) +
geom_jitter(width = 0.15,
alpha = 0.25,
shape = 16) +
geom_boxplot(outlier.shape = NA,
fill = NA) +
scale_x_continuous(name = '# of species',
breaks = 1:7) +
scale_y_continuous(name = expression((italic(F)[pred] - italic(F)[obs])^2),
limits = c(0, 0.06)) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.title = element_blank(),
legend.text = element_text(size = 16),
aspect.ratio = 1.4)
ggplot(plot_this, aes(x = n_species - 1, y = sq_err, group = n_species)) +
geom_jitter(width = 0.15,
alpha = 0.25,
shape = 16) +
geom_boxplot(outlier.shape = NA,
fill = NA) +
scale_x_discrete(name = '# of species',
breaks = 1:7) +
scale_y_continuous(name = expression((italic(F)[pred] - italic(F)[obs])^2),
limits = c(0, 0.06)) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.title = element_blank(),
legend.text = element_text(size = 16),
aspect.ratio = 1.4)
ggplot(plot_this, aes(x = n_species - 1, y = sq_err, group = n_species)) +
geom_jitter(width = 0.15,
alpha = 0.25,
shape = 16) +
geom_boxplot(outlier.shape = NA,
fill = NA) +
scale_x_discrete(name = '# of species') +
scale_y_continuous(name = expression((italic(F)[pred] - italic(F)[obs])^2),
limits = c(0, 0.06)) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.title = element_blank(),
legend.text = element_text(size = 16),
aspect.ratio = 1.4)
View(plot_this)
plot_this$n_species
plot_this <- loo[grepl('Sc', loo$community) & loo$n_species > 1, ]
unique(plot_this$n_species)
plot_this$n_species <- plot_this$n_species - 1
plot_this <- loo[grepl('Sc', loo$community) & loo$n_species > 1, ]
plot_this$n_species <- plot_this$n_species - 1
plot_this$n_species <- factor(plot_this$n_species,
levels = as.character(c(1, 3:6)))
ggplot(plot_this, aes(x = n_species, y = sq_err, group = n_species)) +
geom_jitter(width = 0.15,
alpha = 0.25,
shape = 16) +
geom_boxplot(outlier.shape = NA,
fill = NA) +
scale_x_discrete(name = '# of species') +
scale_y_continuous(name = expression((italic(F)[pred] - italic(F)[obs])^2),
limits = c(0, 0.06)) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.title = element_blank(),
legend.text = element_text(size = 16),
aspect.ratio = 1.4)
ggplot(plot_this, aes(x = n_species, y = sq_err, group = n_species)) +
geom_jitter(width = 0.15,
alpha = 0.25,
shape = 16) +
geom_boxplot(outlier.shape = NA,
fill = NA) +
scale_x_discrete(name = '# of species') +
scale_y_continuous(name = expression((italic(F)[pred] - italic(F)[obs])^2)) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.title = element_blank(),
legend.text = element_text(size = 16),
aspect.ratio = 1.4)
ggplot(plot_this, aes(x = n_species, y = sq_err, group = n_species)) +
geom_jitter(width = 0.15,
alpha = 0.25,
shape = 16) +
geom_boxplot(outlier.shape = NA,
fill = NA) +
scale_x_discrete(name = '# of species') +
scale_y_continuous(name = expression((italic(F)[pred] - italic(F)[obs])^2),
trans = 'log10') +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.title = element_blank(),
legend.text = element_text(size = 16),
aspect.ratio = 1.4)
scale_x_discrete(name = expression(paste('# of species\nco-inoculated with', italic(S. cerevisiae))) +
scale_x_discrete(name = expression(paste('# of species\nco-inoculated with', italic(S.~cerevisiae))) +
ggplot(plot_this, aes(x = n_species, y = sq_err, group = n_species)) +
geom_jitter(width = 0.15,
alpha = 0.25,
shape = 16) +
geom_boxplot(outlier.shape = NA,
fill = NA) +
scale_x_discrete(name = expression(paste('# of species\nco-inoculated with', italic(S.~cerevisiae)))) +
scale_y_continuous(name = expression((italic(F)[pred] - italic(F)[obs])^2),
trans = 'log10') +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.title = element_blank(),
legend.text = element_text(size = 16),
aspect.ratio = 1.4)
ggplot(plot_this, aes(x = n_species, y = sq_err, group = n_species)) +
geom_jitter(width = 0.15,
alpha = 0.25,
shape = 16) +
geom_boxplot(outlier.shape = NA,
fill = NA) +
scale_x_discrete(name = expression(paste('# of species\nco-inoculated with ', italic(S.~cerevisiae)))) +
scale_y_continuous(name = expression((italic(F)[pred] - italic(F)[obs])^2),
trans = 'log10') +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.title = element_blank(),
legend.text = element_text(size = 16),
aspect.ratio = 1.4)
ggplot(plot_this, aes(x = n_species, y = sq_err, group = n_species)) +
geom_jitter(width = 0.15,
alpha = 0.25,
shape = 16) +
geom_boxplot(outlier.shape = NA,
fill = NA) +
scale_x_discrete(name = '# of species\nco-inoculated with S. cerevisiae') +
scale_y_continuous(name = expression((italic(F)[pred] - italic(F)[obs])^2),
trans = 'log10') +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.title = element_blank(),
legend.text = element_text(size = 16),
aspect.ratio = 1.4)
if (save_plots) {
ggsave(filename = '../plots/squared_error_vs_richness.pdf',
device = 'pdf',
dpi = 600,
width = 100,
height = 120,
units = 'mm',
limitsize = F)
}
# heatmap of slopes/intercepts
slopes <- data.frame(species = character(0),
slope = numeric(0),
intercept = numeric(0))
for (sp in unique(data$knock_in)) {
fit_i <- lm(delta_fun.mean ~ background_fun.mean,
data[data$knock_in == sp, ])$coefficients
slopes <- rbind(slopes,
data.frame(species = sp,
slope = fit_i[2],
intercept = fit_i[1]))
}
View(slopes)
write.csv(slopeps, '../data/slopes.csv')
write.csv(slopes, '../data/slopes.csv')
write.csv(slopes, '../data/slopes.csv', row.names = F)
# heatmap of slopes/intercepts
slopes <- data.frame(species = character(0),
slope = numeric(0),
intercept = numeric(0))
for (sp in unique(data$knock_in)) {
fit_i <- lm(delta_fun.mean ~ background_fun.mean,
data[data$knock_in == sp, ])$coefficients
slopes <- rbind(slopes,
data.frame(species = sp,
slope = fit_i[2],
intercept = fit_i[1]))
}
write.csv(slopes, '../data/slopes.csv', row.names = F)
# standardize values (subtract mean, divide by standard deviation) and plot heatmap
std_slopes <- slopes
std_slopes$slope <- (slopes$slope - mean(slopes$slope))/sd(slopes$slope)
std_slopes$intercept <- (slopes$intercept - mean(slopes$intercept))/sd(slopes$intercept)
df_slopes <- melt(std_slopes, id.vars = 'species')
df_slopes$species <- factor(df_slopes$species,
levels = c('Sp', 'Lt', 'Zb', 'Td', 'Sc5', 'Sc8', 'Ku', 'Hop', 'Wa', 'Mp', 'Pk', 'Ap'))
ggplot(df_slopes, aes(x = variable, y = species, fill = value)) +
geom_tile(color = 'black') +
scale_x_discrete(name = '',
position = 'top') +
scale_fill_gradient(low = '#f6e24a',
high = '#18224b') +
scale_y_discrete(limits = rev) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_text(size = 16,
angle = 45,
hjust = 0),
axis.ticks.y = element_blank(),
axis.text.y = element_text(size = 16,
face = 'italic'),
axis.title.y = element_blank(),
panel.border = element_blank(),
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.title = element_text(size = 16),
legend.text = element_text(size = 16),
aspect.ratio = 5.5)
if (save_plots) {
ggsave(filename = '../plots/fees_heatmap.pdf',
device = 'pdf',
dpi = 600,
width = 100,
height = 150,
units = 'mm',
limitsize = F)
}
# predicted vs. observed slopes/intercepts
pred <- read.csv('../data/Predicted_FEE_Sugar.csv')
pred <- melt(pred, id.vars = 'species')
pred$variable <- setNames(c('slope', 'intercept'),
c('Predicted_Slope', 'Predicted_Intercept'))[pred$variable]
colnames(pred)[3] <- 'predicted_value'
slopes <- melt(slopes, id.vars = 'species')
po <- merge(slopes, pred, by = c('species', 'variable'))
# slopes
ggplot(po[po$variable == 'slope', ],
aes(x = predicted_value, y = value)) +
geom_smooth(method = 'lm',
formula = y~x,
se = F,
color = 'black',
fullrange = T) +
geom_point(cex = 3,
shape = 1) +
scale_x_continuous(name = 'Predicted FEE slope',
limits = c(-0.9, 0.25)) +
scale_y_continuous(name = 'Observed FEE slope',
limits = c(-0.9, 0.25)) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 16,
hjust = 0),
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.title = element_text(size = 16),
legend.text = element_text(size = 16),
aspect.ratio = 1)
if (save_plots) {
ggsave(filename = '../plots/fees_pred-obs_slope.pdf',
device = 'pdf',
dpi = 600,
width = 75,
height = 75,
units = 'mm',
limitsize = F)
}
# intercepts
ggplot(po[po$variable == 'intercept', ],
aes(x = predicted_value, y = value)) +
geom_smooth(method = 'lm',
formula = y~x,
se = F,
color = 'black',
fullrange = T) +
geom_point(cex = 3,
shape = 1) +
scale_x_continuous(name = 'Predicted FEE intercept',
limits = c(-0.5, 0.9)) +
scale_y_continuous(name = 'Observed FEE intercept',
limits = c(-0.5, 0.9)) +
theme_bw() +
theme(panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 16,
hjust = 0),
axis.text = element_text(size = 16),
axis.title = element_text(size = 18),
legend.title = element_text(size = 16),
legend.text = element_text(size = 16),
aspect.ratio = 1)
if (save_plots) {
ggsave(filename = '../plots/fees_pred-obs_intercept.pdf',
device = 'pdf',
dpi = 600,
width = 75,
height = 75,
units = 'mm',
limitsize = F)
}
View(data)
### MAKE PREDICTIONS FOR ALL OUT-OF-SAMPLE COMMUNITIES
species <- unique(data$knock_in)
species
n _species <- 2
n_species <- 2
combn(length(species), 1)
combn(length(species), 2)
t(combn(length(species), 2))
sp_index <- t(combn(length(species), n_species))
nrow(sp_index)
sp_index[1,]
sp_names[sp_index[1,]]
species[sp_index[1,]]
species
paste(species[sp_index[1,]], collapse = ',')
# make all possible community names
species <- unique(data$knock_in)
tst <- lapply(1:length(species),
FUN = function(n_species) {
sp_index <- t(combn(length(species), n_species))
comm_names <- sapply(1:nrow(sp_index),
FUN = function(i) paste(species[sp_index[i, ]], collapse = ','))
return(comm_names)
})
tst[[1]]
tst[[2]]
tst[[3]]
# make all possible community names
species <- unique(data$knock_in)
comms <- lapply(1:length(species),
FUN = function(n_species) {
sp_index <- t(combn(length(species), n_species))
comm_names <- sapply(1:nrow(sp_index),
FUN = function(i) paste(species[sp_index[i, ]], collapse = ','))
return(comm_names)
})
comms <- unlist(comms)
comms_oos <- comms[!(comms %in% data_list$community)]
predictedF_oos <- predictF_base(comms_oos, data_list)
predictedF_oos <- predictF_base(comms_oos[sample(1:length(comms_oos), 10)], data_list) # this can take a while to execute, there are a lot of out-of-sample communities
predictedF_oos <- predictF_base(comms_oos[sample(1:length(comms_oos), 100)], data_list) # this can take a while to execute, there are a lot of out-of-sample communities
startTime <- Sys.time()
predictedF_oos <- predictF_base(comms_oos[sample(1:length(comms_oos), 100)], data_list) # this can take a while to execute, there are a lot of out-of-sample communities
endTime <- Sys.time()
endTime - startTime
10/100
10/100 * 4095
10/100 * 4095 / 60
startTime <- Sys.time()
predictedF_oos <- predictF_base(comms_oos[sample(1:length(comms_oos), 100)], data_list) # this can take a while (5-10min on my computer) to execute, there are a lot of out-of-sample communities
endTime <- Sys.time()
endTime - startTime
startTime <- Sys.time()
predictedF_oos <- predictF_base(comms_oos[sample(1:length(comms_oos), 500)], data_list) # this can take a while (5-10min on my computer) to execute, there are a lot of out-of-sample communities
endTime <- Sys.time()
endTime - startTime
42/500
42/500 * 4095
42/500 * 4095 / 60
predictedF_oos <- predictF_base(comms_oos, data_list) # this can take a while (5-10min on my computer) to execute, there are a lot of out-of-sample communities
View(data_list)
View(data_list)
predictedF_oos <- predictF_base(comms_oos, # this can take a while (5-10min on my computer) to execute, there are a lot of out-of-sample communities
rbind(data_list, data.frame(community = '', fun = 0)))
predictedF_oos
write.csv(predictedF_oos, '../data/predicted_functions.csv', row.names = F)
